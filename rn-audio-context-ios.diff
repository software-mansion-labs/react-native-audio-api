diff --git a/apps/common-app/src/examples/EmptyExample.tsx b/apps/common-app/src/examples/EmptyExample.tsx
index 19a20bdce..b437e0103 100644
--- a/apps/common-app/src/examples/EmptyExample.tsx
+++ b/apps/common-app/src/examples/EmptyExample.tsx
@@ -1,11 +1,41 @@

########################################################
EmptyExample.tsx
-import { Text, StyleSheet, View } from 'react-native';
+import { Text, StyleSheet, View, Button } from 'react-native';
 
 import React from 'react';
 
+interface Oscillator {
+  start: () => void;
+  stop: () => void;
+  frequency: number;
+}
+
+function createOscillator(frequency: number): Oscillator {
+  // pod spodem uÅ¼ywa JSI
+  const oscillator = global.jsiCreateOscillator(frequency);
+  return oscillator;
+}
+
+function sleep(ms: number) {
+  return new Promise((resolve) => setTimeout(resolve, ms));
+}
+
 export default function EmptyExample() {
+  const handlePress = React.useCallback(async () => {
+    const oscillator = createOscillator(440);
+    console.log(oscillator);
+    console.log(Object.keys(oscillator));
+    console.log(oscillator.frequency);
+    oscillator.start();
+    for (let i = 0; i <= 12; i++) {
+      oscillator.frequency = 440 * 2 ** (i / 12);
+      await sleep(100);
+    }
+    oscillator.stop();
+  }, []);
+
   return (
     <View style={styles.container}>
       <Text>Hello world!</Text>
+      <Button title="Press me" onPress={handlePress} />
     </View>
   );
 }

 diff --git a/packages/react-native-reanimated/Common/cpp/ReanimatedRuntime/RNRuntimeDecorator.cpp b/packages/react-native-reanimated/Common/cpp/ReanimatedRuntime/RNRuntimeDecorator.cpp
index c16943100..4ddfb8866 100644
--- a/packages/react-native-reanimated/Common/cpp/ReanimatedRuntime/RNRuntimeDecorator.cpp
+++ b/packages/react-native-reanimated/Common/cpp/ReanimatedRuntime/RNRuntimeDecorator.cpp
@@ -1,5 +1,7 @@

########################################################
RNRuntimeDecorator.cpp

 #include "RNRuntimeDecorator.h"
+#include <iostream>
 #include "ReanimatedVersion.h"
+#include "OscillatorHostObject.h"
 
 namespace reanimated {
 
@@ -44,6 +46,31 @@ void RNRuntimeDecorator::decorate(
       rnRuntime,
       jsi::PropNameID::forAscii(rnRuntime, "__reanimatedModuleProxy"),
       jsi::Object::createFromHostObject(rnRuntime, nativeReanimatedModule));
+
+  jsi::Runtime &rt = rnRuntime;
+  
+//    auto cppCreateOscillator = [](float frequency) -> float {
+//      std::cout << "stworzony oscylator " << frequency << std::endl;
+//      return 1.23;
+//    };
+  
+    auto hostFunctionCreateOscillator = [](jsi::Runtime&
+    rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) -> jsi::Value {
+      const jsi::Value &jsiFrequency = args[0];
+      const float cppFrequency = static_cast<float>(jsiFrequency.asNumber());
+  
+//      auto cppResult = cppCreateOscillator(cppFrequency);
+      
+      auto cppOscillatorHostObjectPtr = std::make_shared<OscillatorHostObject>(420.0f);
+    
+      const auto &jsiOscillatorHostObject = jsi::Object::createFromHostObject(rt, cppOscillatorHostObjectPtr);
+      
+      return jsi::Value(rt, jsiOscillatorHostObject);
+    };
+  
+    auto jsiCreateOscillator = jsi::Function::createFromHostFunction(rt, jsi::PropNameID::forUtf8(rt, "jsiCreateOscillator"), 1, hostFunctionCreateOscillator);
+  
+    rt.global().setProperty(rt, jsi::String::createFromUtf8(rt, "jsiCreateOscillator"), jsiCreateOscillator);
 }
 
 } // namespace reanimated

########################################################
OscillatorHostObject.cpp
+#include "OscillatorHostObject.h"
+#include <iostream>
+
+using namespace reanimated;
+
+jsi::Value OscillatorHostObject::get(jsi::Runtime &rt, const jsi::PropNameID& name) {
+  if (name.utf8(rt) == "start") {
+    return jsi::Function::createFromHostFunction(rt, jsi::PropNameID::forUtf8(rt, "start"), 0,
+      [this](jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) -> jsi::Value {
+        platformOscillator_.start();
+        return jsi::Value::undefined();
+    });
+  }
+  
+  if (name.utf8(rt) == "stop") {
+    return jsi::Function::createFromHostFunction(rt, jsi::PropNameID::forUtf8(rt, "stop"), 0,
+      [this](jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) -> jsi::Value {
+        platformOscillator_.stop();
+        return jsi::Value::undefined();
+    });
+  }
+  
+  if (name.utf8(rt) == "frequency") {
+    return jsi::Value(frequency_);
+  }
+
+  return jsi::Value::undefined();
+}
+
+void OscillatorHostObject::set(jsi::Runtime &rt, const jsi::PropNameID& name, const jsi::Value& value) {
+  if (name.utf8(rt) == "frequency") {
+    platformOscillator_.setFrequency(static_cast<float>(value.asNumber()));
+  }
+}
+
+std::vector<jsi::PropNameID> OscillatorHostObject::getPropertyNames(jsi::Runtime& rt) {
+  std::vector<jsi::PropNameID> names;
+//  names.push_back(jsi::PropNameID::forUtf8(rt, "__ReanimatedOscillator"));
+  return names;
+}
diff --git a/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.h b/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.h
new file mode 100644
index 000000000..fdc644272
--- /dev/null
+++ b/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.h
@@ -0,0 +1,27 @@

########################################################
OscillatorHostObject.h

+#pragma once
+
+#include <jsi/jsi.h>
+#include <RNReanimated/PlatformOscillator.h>
+
+using namespace facebook;
+
+namespace reanimated {
+
+class OscillatorHostObject : public jsi::HostObject {
+public:
+  explicit OscillatorHostObject(float frequency) : frequency_(frequency), platformOscillator_(frequency) {}
+
+  jsi::Value get(jsi::Runtime&, const jsi::PropNameID& name);
+  
+  void set(jsi::Runtime&, const jsi::PropNameID& name, const jsi::Value& value);
+
+  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& rt);
+    
+protected:
+  float frequency_;
+
+  PlatformOscillator platformOscillator_;
+  
+};
+
+}; // namespace reanimated


diff --git a/packages/react-native-reanimated/apple/PlatformOscillator.h b/packages/react-native-reanimated/apple/PlatformOscillator.h
new file mode 100644
index 000000000..9fe04e866
--- /dev/null
+++ b/packages/react-native-reanimated/apple/PlatformOscillator.h
@@ -0,0 +1,24 @@

########################################################
PlatformOscillator.h

+#pragma once
+
+#ifdef __OBJC__ // when compiled as Objective-C++
+#import <RNReanimated/IOSOscillator.h>
+#else // when compiled as C++
+typedef struct objc_object IOSOscillator;
+#endif // __OBJC__
+
+namespace reanimated {
+
+class PlatformOscillator {
+  public:
+    explicit PlatformOscillator(const float frequency);
+    void start() const;
+    void stop() const;
+    void setFrequency(const float frequency);
+    
+  protected:
+    const float frequency_;
+
+    IOSOscillator *iosOscillator_;
+};
+
+} // namespace reanimated
diff --git a/packages/react-native-reanimated/apple/PlatformOscillator.mm b/packages/react-native-reanimated/apple/PlatformOscillator.mm
new file mode 100644
index 000000000..06be98067
--- /dev/null
+++ b/packages/react-native-reanimated/apple/PlatformOscillator.mm
@@ -0,0 +1,21 @@

########################################################
PlatformOscillator.mm

+#include <RNReanimated/PlatformOscillator.h>
+
+namespace reanimated {
+
+PlatformOscillator::PlatformOscillator(const float frequency) : frequency_(frequency) {
+  iosOscillator_ = [[IOSOscillator alloc] initWithFrequency:frequency];
+}
+
+void PlatformOscillator::start() const {
+  [iosOscillator_ start];
+}
+
+void PlatformOscillator::stop() const {
+  [iosOscillator_ stop];
+}
+
+void PlatformOscillator::setFrequency(const float frequency) {
+  [iosOscillator_ setFrequency:frequency];
+}
+
+} // namespace reanimated


diff --git a/packages/react-native-reanimated/apple/IOSOscillator.h b/packages/react-native-reanimated/apple/IOSOscillator.h
new file mode 100644
index 000000000..c5cd537f0
--- /dev/null
+++ b/packages/react-native-reanimated/apple/IOSOscillator.h
@@ -0,0 +1,17 @@

########################################################
IOSOscillator.h

+#import <AVFoundation/AVFoundation.h>
+#import <Foundation/Foundation.h>
+
+@interface IOSOscillator : NSObject
+
+- (instancetype)initWithFrequency:(CGFloat)frequency;
+
+@property (nonatomic, strong) AVAudioEngine *audioEngine;
+@property (nonatomic, strong) AVAudioPlayerNode *playerNode;
+
+- (void)start;
+
+- (void)stop;
+
+- (void)setFrequency:(CGFloat)frequency;
+
+@end
diff --git a/packages/react-native-reanimated/apple/IOSOscillator.m b/packages/react-native-reanimated/apple/IOSOscillator.m
new file mode 100644
index 000000000..cbfd25c95
--- /dev/null
+++ b/packages/react-native-reanimated/apple/IOSOscillator.m
@@ -0,0 +1,81 @@

########################################################
IOSOscillator.m

+#import <RNReanimated/IOSOscillator.h>
+
+#define SAMPLE_RATE 44100
+#define DURATION 2.0
+
+
+@implementation IOSOscillator {
+  CGFloat frequency_;
+}
+
+- (instancetype)initWithFrequency:(CGFloat)frequency {
+  if (self = [super init]) {
+    frequency_ = frequency;
+  }
+  return self;
+}
+
+- (AVAudioPCMBuffer *)generateSineWaveBufferWithFormat:(AVAudioFormat *)audioFormat frequency:(float)frequency duration:(float)duration {
+    // Calculate the number of frames
+    AVAudioFrameCount frameCount = (AVAudioFrameCount)(duration * SAMPLE_RATE);
+    // Create the PCM buffer
+    AVAudioPCMBuffer *pcmBuffer = [[AVAudioPCMBuffer alloc] initWithPCMFormat:audioFormat frameCapacity:frameCount];
+    pcmBuffer.frameLength = frameCount;
+    // Fill the buffer with the sinusoidal wave data
+    float *data = pcmBuffer.floatChannelData[0];
+    float theta = 0.0;
+    float theta_increment = 2.0 * M_PI * frequency / SAMPLE_RATE;
+    for (AVAudioFrameCount frame = 0; frame < frameCount; frame++) {
+        data[frame] = sin(theta);
+        theta += theta_increment;
+        if (theta > 2.0 * M_PI) {
+            theta -= 2.0 * M_PI;
+        }
+    }
+    return pcmBuffer;
+}
+
+- (void)start {
+  NSLog(@"Started playing audio with frequency %f", frequency_);
+  
+  // Initialize the audio engine and player node
+    self.audioEngine = [[AVAudioEngine alloc] init];
+    self.playerNode = [[AVAudioPlayerNode alloc] init];
+    [self.audioEngine attachNode:self.playerNode];
+    // Create an audio format with the sample rate and channel count
+    AVAudioFormat *audioFormat = [[AVAudioFormat alloc] initWithCommonFormat:AVAudioPCMFormatFloat32
+                                                                  sampleRate:SAMPLE_RATE
+                                                                    channels:1
+                                                                 interleaved:NO];
+    // Connect the player node to the main mixer
+    [self.audioEngine connect:self.playerNode to:self.audioEngine.mainMixerNode format:audioFormat];
+    // Generate the sinusoidal wave buffer
+    AVAudioPCMBuffer *pcmBuffer = [self generateSineWaveBufferWithFormat:audioFormat
+                                                                frequency:frequency_
+                                                                 duration:DURATION];
+    // Schedule the buffer for playback
+    [self.playerNode scheduleBuffer:pcmBuffer atTime:nil options:AVAudioPlayerNodeBufferLoops completionHandler:nil];
+    // Start the audio engine
+    NSError *error = nil;
+    if (![self.audioEngine startAndReturnError:&error]) {
+        NSLog(@"Error starting audio engine: %@", error);
+        return;
+    }
+    // Start the player node
+    [self.playerNode play];
+}
+
+- (void)stop {
+  NSLog(@"Stopped playing audio with frequency %f", frequency_);
+  
+   [self.playerNode stop];
+}
+
+- (void)setFrequency:(CGFloat)frequency {
+  [self stop];
+  frequency_ = frequency;
+  [self start];
+}
+
+
+@end

diff --git a/apps/paper-example/ios/Podfile.lock b/apps/paper-example/ios/Podfile.lock
index e6fa2dd16..0a00daa78 100644
--- a/apps/paper-example/ios/Podfile.lock
+++ b/apps/paper-example/ios/Podfile.lock
@@ -1935,7 +1935,7 @@ SPEC CHECKSUMS:
   RNCPicker: 3e2c37a8328f368ce14da050cdc8231deb5fc9f9
   RNFlashList: 2a5ca82c4998952060b77fa9a1eb05f7ed8783b6
   RNGestureHandler: 7a8279ab6061b64741aa72e52540bb516bea0f16
-  RNReanimated: f144fe5d11b880644ad9fa09a6e4963495572d32
+  RNReanimated: fb34c935e58ed93d1512be3886d87834de05e7f0
   RNScreens: 9e52e7ac57fef4008725149eb07b4b738b63c0c7
   RNSVG: 43b64ed39c14ce830d840903774154ca0c1f27ec
   SocketRocket: abac6f5de4d4d62d24e11868d7a2f427e0ef940d
diff --git a/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.cpp b/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.cpp
new file mode 100644
index 000000000..dcc0322a0
--- /dev/null
+++ b/packages/react-native-reanimated/Common/cpp/OscillatorHostObject.cpp
@@ -0,0 +1,40 @@